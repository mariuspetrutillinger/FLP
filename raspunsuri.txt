Care ar fi cea mai apropiata scriere in lambda calcul pentru A, unde f(x) = x² + 1 si A = f(2)?
A = 5

------------

Care din conceptele de mai jos nu este un model de calculabilitate?

masinile Turing

punctele fixe

functiile recursive

lambda calcul


Punctele fixe nu sunt un model de calculabilitate în sine, ci mai degrabă un concept matematic utilizat în diverse modele de calculabilitate, cum ar fi lambda calcul, funcțiile recursive sau mașinile Turing. Un punct fix pentru o funcție f este o valoare x astfel încât f(x) = x. Punctele fixe sunt importante în teoria calculabilității deoarece ele pot fi utilizate pentru a defini funcții recursive și pot fi folosite pentru a demonstra existența sau inexistența unor soluții în diverse probleme de computabilitate.

În schimb, mașinile Turing, funcțiile recursive și lambda calcul sunt modele de calculabilitate. Mașinile Turing și funcțiile recursive sunt modele teoretice ale unui calculator, în timp ce lambda calcul este un alt model matematic pentru calculabilitate, bazat pe ideea de funcții lambda. Toate aceste modele de calculabilitate sunt echivalente, adică toate acestea pot rezolva aceleași probleme de calculabilitate.

-------------

In lambda calcul fara tipuri:

a) trebuie sa specificam mereu tipul oricarei expresii

b) sunt eliminate expresiile de forma f(f)

c) nu specificam domeniul/codomeniul functiilor

d) putem avea efecte laterale 


c) Nu specificăm domeniul/codomeniul funcțiilor.

În lambda calcul fără tipuri, nu este necesar să specificăm domeniul/codomeniul funcțiilor, deoarece acesta se concentrează mai mult pe comportamentul funcțiilor decât pe semantica tipurilor. Acest model se bazează pe ideea de funcții lambda universale, care pot accepta orice tip de argument și întoarce orice tip de rezultat.

Răspunsurile pentru celelalte opțiuni sunt:

a) Nu trebuie să specificăm mereu tipul oricărei expresii în lambda calcul fără tipuri.

b) Expresiile de forma f(f) sunt permise în lambda calcul fără tipuri.

d) Putem avea efecte laterale în lambda calcul fără tipuri.

-------------

Care din lambda termenii de mai jos nu este închis?

λxyz.xxy

λxy.xxy

λx.xxy

λx.xx

Lambda termenul care nu este închis este λx.xxy. Acesta conține variabila liberă "y", care nu este legată de nicio abstracție λ din termenul respectiv. Un lambda termen este considerat închis atunci când toate variabilele sale sunt legate de cel puțin o abstracție λ în cadrul acelui termen.

-----------

Care sunt variabilele libere din termenul λx.xxy?

termenul nu are variabile libere

x

y

x și y

Îmi cer scuze, am făcut o greșeală. Termenul λx.xxy are o singură variabilă liberă, iar aceasta este "y". Variabila "x" apare legată de prima abstracție λ, astfel încât nu este o variabilă liberă.
-----------

Care din următoarele afirmații este adevărată?

un combinator este orice lambda termen

un combinator este un lambda termen fără variabile libere (închis)

un combinator este un lambda termen cu variabile libere

un combinator este un lambda termen care are și variabile libere, și variabile legate

Afirmația adevărată este "un combinator este un lambda termen fără variabile libere (închis)".

Un combinator este un lambda termen care poate fi folosit pentru a combina (compușa) funcții, și care nu are nicio variabilă liberă (adică toate variabilele din termenul lambda sunt legate de lambda abstractor). În alte cuvinte, combinatorii sunt funcții lambda care nu depind de nicio variabilă externă și pot fi aplicați direct fără să fie nevoie să li se ofere argumente suplimentare.

De exemplu, I combinatorul (identitate) este definit ca: λx.x. Acesta este un combinator, deoarece nu are nicio variabilă liberă și poate fi aplicat direct, fără să fie nevoie să-i oferiți un argument suplimentar.

Pe de altă parte, lambda termenii care au variabile libere sunt numiți lambda termeni deschiși și nu sunt combinatori. Aceștia trebuie să fie "închisi" (adica sa se elimine variabilele libere prin abstractizare sau aplicare), pentru a deveni combinatori.

-------------

